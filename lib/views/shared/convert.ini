// Add this class
class ExchangeRate {
  final double rate;
  final DateTime lastUpdated;

  ExchangeRate({required this.rate, required this.lastUpdated});

  factory ExchangeRate.fromJson(Map<String, dynamic> json) {
    return ExchangeRate(
      rate: json['rate'],
      lastUpdated: DateTime.parse(json['lastUpdated']),
    );
  }
}

class AccountsController extends GetxController {
  // Add this map
  final Rx<Map<String, Map<String, ExchangeRate>>> exchangeRates = Rx<Map<String, Map<String, ExchangeRate>>>({});

  // Add this method
  Future<void> fetchExchangeRates() async {
    try {
      final token = await secureStore.secureStorage.read(key: 'auth_token');
      if (token == null) return;

      final response = await dio.get(
        '/exchange-rates',
        options: Options(headers: {'Authorization': 'Bearer $token'}),
      );

      if (response.statusCode == 200) {
        final Map<String, Map<String, ExchangeRate>> rates = {};
        
        (response.data as Map<String, dynamic>).forEach((fromCurrency, toCurrencies) {
          rates[fromCurrency] = {};
          (toCurrencies as Map<String, dynamic>).forEach((toCurrency, rateData) {
            rates[fromCurrency]![toCurrency] = ExchangeRate.fromJson(rateData);
          });
        });

        exchangeRates.value = rates;
      }
    } catch (e) {
      print('Error fetching exchange rates: $e');
    }
  }
}



Widget _buildExchangeRateBox(ThemeData theme) {
  return Obx(() {
    final fromAccount = controller.selectedAccount.value;
    final toAccount = controller.selectedDestinationAccount.value;

    if (fromAccount == null || toAccount == null) {
      return const SizedBox.shrink();
    }

    final fromCurrency = fromAccount.currency;
    final toCurrency = toAccount.currency;

    if (fromCurrency == toCurrency) {
      return const SizedBox.shrink();
    }

    final rates = controller.accountsController.exchangeRates.value;
    final rate = rates[fromCurrency]?[toCurrency]?.rate;

    if (rate == null) {
      return const SizedBox.shrink();
    }

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Курс обмена',
              style: theme.textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  '1 ${getCurrencySymbol(fromCurrency)} = ${rate.toStringAsFixed(2)} ${getCurrencySymbol(toCurrency)}',
                  style: theme.textTheme.titleLarge?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  });
}


Widget build(BuildContext context) {
  // ... existing code ...
  Column(
    crossAxisAlignment: CrossAxisAlignment.start,
    children: [
      buildCardSelector(theme),
      SizedBox(height: size.height * 0.02),
      _buildExchangeRateBox(theme), // Add this line
      SizedBox(height: size.height * 0.02),
      buildDestinationCardSelector(theme),
      // ... rest of the widgets
    ],
  )
  // ... existing code ...
}


class ConvertController extends GetxController {
  @override
  void onInit() {
    super.onInit();
    _initializeSelectedAccount();
    amountController.text = '0';
    updateAmount('0');
    accountsController.fetchExchangeRates(); // Add this line
    // ... rest of onInit
  }
}
